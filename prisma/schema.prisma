generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model album {
  id              String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String       @db.VarChar(100)
  description     String?      @db.VarChar(255)
  organization_id String       @db.Uuid
  created_at      DateTime     @default(now()) @db.Timestamp(6)
  updated_at      DateTime     @default(now()) @db.Timestamp(6)
  organization    organization @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  picture         picture[]
}

model archive {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String   @db.VarChar(100)
  description String?  @db.VarChar(255)
  picture_id  String   @db.Uuid
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  picture     picture  @relation(fields: [picture_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model invitation {
  id                               String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  status                           String       @db.VarChar(20)
  inviter_id                       String       @db.Uuid
  invitee_id                       String       @db.Uuid
  organization_id                  String       @db.Uuid
  created_at                       DateTime     @default(now()) @db.Timestamp(6)
  updated_at                       DateTime     @default(now()) @db.Timestamp(6)
  user_invitation_invitee_idTouser user         @relation("invitation_invitee_idTouser", fields: [invitee_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user_invitation_inviter_idTouser user         @relation("invitation_inviter_idTouser", fields: [inviter_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  organization                     organization @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model organization {
  id          String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?      @db.VarChar(255)
  name        String       @db.VarChar(255)
  created_at  DateTime     @default(now()) @db.Timestamp(6)
  updated_at  DateTime     @default(now()) @db.Timestamp(6)
  user_id     String       @db.Uuid
  tenant_id   String       @db.VarChar(255)
  album       album[]
  invitation  invitation[]
  user        user         @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model picture {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title      String    @db.VarChar(100)
  caption    String?   @db.VarChar(255)
  tag        String?   @db.VarChar(100)
  order      Int?
  album_id   String    @db.Uuid
  created_at DateTime  @default(now()) @db.Timestamp(6)
  updated_at DateTime  @default(now()) @db.Timestamp(6)
  archive    archive[]
  album      album     @relation(fields: [album_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model user {
  id                                     String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                                  String         @unique @db.VarChar(255)
  firstName                              String?        @db.VarChar(255)
  lastName                               String?        @db.VarChar(255)
  roq_user_id                            String         @db.VarChar(255)
  tenant_id                              String         @db.VarChar(255)
  created_at                             DateTime       @default(now()) @db.Timestamp(6)
  updated_at                             DateTime       @default(now()) @db.Timestamp(6)
  invitation_invitation_invitee_idTouser invitation[]   @relation("invitation_invitee_idTouser")
  invitation_invitation_inviter_idTouser invitation[]   @relation("invitation_inviter_idTouser")
  organization                           organization[]
}
